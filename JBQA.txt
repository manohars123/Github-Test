Connectors under my ownership:
EpicorERP:Get,Get BAQ,Post,Update,Delete,Put BAQ(UBAQ)
AmazonS3:Get Object, Put Object
Github: Query File, Create File, Update File, Delete File
GoogleDrive:Get File, Create File, Update File, Delete File
GoogleDocs: Get Docs, Update Docs, Create Docs
GoogleSheets: Get Sheets, Update Sheets, Create Sheets
JIRA: Create, Update , Delete
Shopify: Get Products, Add Products, Put Products
slack: Post Message
zendesk:Create,Query,Update,Delete
snowflake:Get, Query,Put,Delete,Invoke Stored Procedure
HubSpot: Get Contacts, Create Contacts, Update Contacts, Delete Contacts
QA Red prod cag 10.7 smoke tests:
Epicor: Pass
GoogleDocs:Pass
Slack:Pass
GoogleSheets:Pass
Hubspot:Pass
Zendesk:Pass
snowflake:Pass
Shopify:Pass
AamzonS3:Pass
Jira:Pass

copy into table from @stagename/tablename/

insert into snow_stage(name) values('snow_stage/destFile.csv')

25231 jit 10.7 /8 


EPICOR 10.7 testing need to test:

Test all actvities with different companies.
Get BAQ should be tested against its own set of services
Get should be tested with odata using transformation now so QA can test with hard coded values and input files along with UI now.


Created new ABBCCode with different company...Get response has all records.
Updated successfully and deleted successfully with same company.

new abccode created with EPICPF
Updated successfully
Able to retrieve updated data using Get









what data is critiical
end point type
2nd largest sun netsuite
maturity stage to netsuite go to sales
sun strategy call to action
discoverdevelopcaptureengage


Summary:
Get activity retrieves default value for Company though different Company value is specified in request file.



Steps to reproduce:
1.Login to CS with valid user.
2.Configure EpicorERP connector with manager creds. [that has default company=EPICPF]
3.Drag 'Get' actvity and configure it for  ABCCODe1 services or any other services.
4.Provide following input file in having Company=EPIC06
5.Provide both the transfrations and deply and run the operation.
6.Verify that since input file is having Company=EPIC06 and tranformation mapping is correct Get activity response should have all details related to Company=EPIC06


Actual Result: Response file has data related to default Company=EPICPF. 

See attached :

Project JSON

Please refer last operation i.e. 1.8 Get company data using input file for this case
Input File:

Response File:




10.7 status so far:

--EpicorERP and Zendesk tickets are in progress.
--Reported Epicor related issue https://jitterbit.atlassian.net/browse/JIT-26116?oldIssueView=true


Friday 9/13 priorities:
1.Finish off with 10.7 tickets
2.Complete https://jitterbit.atlassian.net/browse/JIT-25929?oldIssueView=true
3.Complete https://jitterbit.atlassian.net/browse/JIT-24306?oldIssueView=true


FYI.. thanks :)


34 adults
12 kids


gulabjam
dahi wada
paneer bhaji,
daal fry
jeera rice
polya
aalu wade
noodles



Get BAQ:
1.Do not mention any company:
Get data for default company..in this case its EPIC01
'ABCCode1 eq \'\`\''

Able to retrieve data using input file

File a ticket:
1.pSysRevID :Provide this in custom value or input file: Get file has data for all sysid .Exppeting to be only one that has provided.


2.JBSFCustomerContact service and JBSFQuotes :Get BAQ gives bad request error


Test cases:'


1.Tested for JBSfParts,JBSFCustomerContact,COM-CustContacts,JBSFQuotes
2.Tested with custom values,input files 


Notes by dev:
1. If you get Bad request error during deploy and run then add request tranformation to that selected service and then deploy and run.
2.For Get BAQ activity if user gets Socket time out error  then during activity configuration increase 'Request Timeout' under 'OPTIONAL SETTINGS' to get rid of this error.
3.In pSysRevID is 0 or any valid value then it  feteches all records..confirmed with dev and it is expected since Epicor APIs work like that.
4.when value for pSysRevID is invalid like whitespace the execution gives an error 'Error loading the request and response schema for activity or OData parameters might be wrong Bad Request  ,

5.For large and invalid pSysRevID the resppose is blank.


4312534251341543126342635436242364536453264723437254362543653735463254325427357426546324563245326543725423543264352645645654

For small and invalid pSysRevID response is: feteches all valid values

https://jitterbit.atlassian.net/browse/JIT-26181?oldIssueView=true NA

https://jitterbit.atlassian.net/browse/JIT-26191?oldIssueView=true APAC

https://jitterbit.atlassian.net/browse/JIT-26201?oldIssueView=true EMEA

https://drive.google.com/open?id=1u-D_JKQsGxF0LH09W22xH9dxkB_FB4a3







EMEA 10.7
Zendesk,epicor ,amazon ,jira ,googlesheets pass sandbox
12963,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,
win:amazon,zendesk,sheets,
jira,zendesk,amazon,sheets,epicor

Epicor regression steps:
1.Epicor test connection with valid and invalid test connection parameters
For valid values Give Connection Success message
For invalid parameter values ,give respective error messages.

2.Create new ABCCode1
3. Update exusting ABCCode1
4. Delete exstng ABCCode1
5.Retrieve all ABCCodes using Get
6.Retrive BAQ data for default company EPICPF
7. Retrieve BAQ data for specified company 
8. Update UBAQ values with different company
9. Update  UBAQ with existing data and get correct error messages
10. End to end test
Create ewn ABCCode
Update it
Retrieve ABCCODe
Delete created ABBCCode
Retrive codes and check there is no entry for deleted code.
11Test all operations using Linux agent
12Test all operations using WinPvt agent''
13Test all operations using SCAG agent
14TEst all activities using temp,Local,FTP end point,Global variables



10.19

Epicor
Snoflake
GDRive
Hubspot
Shopify
JIRA
gsheets
hdocs
github
cherwll
slack
zendesk.....trial ends
